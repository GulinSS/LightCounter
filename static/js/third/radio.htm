<!doctype html>
<!--[if lt IE 7]> <html class="no-js ie6 oldie" lang="en"> <![endif]-->
<!--[if IE 7]>    <html class="no-js ie7 oldie" lang="en"> <![endif]-->
<!--[if IE 8]>    <html class="no-js ie8 oldie" lang="en"> <![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js" lang="en"> <!--<![endif]-->
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <title>Radio.js | Chainable and Depencency-free Pub/Sub for JavaScript</title>
  <meta name="description" content="Radio.js is a chainable depencency-free small publish/subscribe javascript library.  Implement the observer pattern in your javascript project in just a few lines of code.">
  <meta name="keywords" content="pub/sub, publish, subscribe, observer pattern, javascript, chainable">
  <meta name="author" content="Scott Murphy">
  <!-- CSS concatenated and minified via ant build script-->
  <link href='http://fonts.googleapis.com/css?family=Lobster|Armata' rel='stylesheet' type='text/css'>
  <link href='js/libs/prettify.css' rel='stylesheet' type='text/css'>
  <link rel="stylesheet" href="css/style.css">
  <!-- end CSS-->

  <script src="js/libs/modernizr-2.0.6.min.js"></script>
</head>

<body onload="prettyPrint()">
  <div id="container">
    <header>
		<img src="../img/radio.png" alt="radio.js - the easy dependency-free pub/sub for javascript"/>
		<nav>
			<ul>
				<li><a href="index.html">Introduction</a></li>
				<li><a href="documentation.html" class="active">Documentation</a></li>
				<li><a href="https://raw.github.com/uxder/Radio/master/radio.min.js">Download</a></li>
				<li><a href="https://github.com/uxder/Radio">Github Source</a></li>
			</ul>
		</nav>
    </header>
    <div id="main" role="main">
		<article>
			<h2>Getting Started</h2>
			<p>Make sure you <a href="https://github.com/uxder/Radio">grab the lastest copy of Radio.js</a> and include it in your project to get started. </p>

			<p>Some basic samples to get the idea.</p>
						<p>
<pre class="prettyprint">
//create topic called changeTabEvent and subscribe myFunction
radio('changeTabEvent').subscribe(myfunction);

//publish to the topic changeTabEvent
radio('changeTabEvent').broadcast(data);

//unsubscribe myFunction from the topic changeTabEvent
radio('changeTabEvent').unsubscribe(myFunction);

//do all of the above in one line via chaining
radio('changeTabEvent').subscribe(myFunction).broadcast(data).unsubscribe(myFunction);
</pre>
						</p>
						
			<h2>radio()</h2>
			<p>Every radio call starts with the radio() method which accepts a string to set the current topic.</p>		
<pre class="prettyprint">
//creates and selects the topic to changeTabEvent
radio('changeTabEvent');
</pre>	
					
			<h2>.subscribe()</h2>
			<p>Add subscribers to a topic. </p>
			<p>
<pre class="prettyprint">
//subscribe callback
radio('changeTabEvent').subscribe(callback);
//subscribe callback with context
radio('changeTabEvent').subscribe([callback,context]);
</pre>
			</p>
			
			
					<div class="spacer"></div>
					<p>You can subscribe multiple callbacks at once. </p>
							<p>
		<pre class="prettyprint">
//subscribe three callbacks at once
radio('changeTabEvent').subscribe(callback, callback2, [callback3.init, callback3]);

//subscribe it via chaining if you want
radio('changeTabEvent').subscribe(callback).subscribe(callback2).subscribe([callback3.init, callback3]);
</pre>
				</p>			
			<div class="spacer"></div>
			
			<a name="context"></a>
			<h3>Callbacks with context </h3>
			<p> With Radio you can set the context of 'this' when your callback is invoked by adding your callback as an array with context. 
				This is particularly useful if you are namespacing your project under one global object.
			</p>

<p>
<pre class="prettyprint">
radio('changeTabEvent').subscribe([callback, context]);
</pre>
</p>	
<p>Example that demonstrates why you may want to do this.</p>
<p>
<pre class="prettyprint">
//your global namespaced application object
var myApp = {
	init: function() {
		alert(this);
		this.run();
	},
	run: function() {
		//do something
	}
}

//first subscribe it without setting context
//this will fail because 'this' is set to the window object
radio('changeTabEvent').subscribe(myApp.init).broadcast();

//subscribe it with context. 
//this will work because value of 'this' is set to myApp
radio('changeTabEvent').subscribe([myApp.init, myApp]).broadcast();

</pre>
</p>	
				
					<h2>.broadcast()</h2>
					<p>Publish a message to all subscribers in a selected topic. All parameters get passed to the subscribers.</p>
							<p>
<pre class="prettyprint">
radio('changeTabEvent').subscribe(function(data1, data2) {
	//do something with data1 and data2
});
radio('changeTabEvent').broadcast(data1, data2);
</pre>
</p>			
								
					<h2>.unsubscribe()</h2>
					<p>Remove subscribers from a topic. </p>
						<p>
<pre class="prettyprint">
//first subscribe a subscriber
radio('changeTabEvent').subscribe(callback);
//now unsubscribe it
radio('changeTabEvent').unsubscribe(callback);
</pre>
						</p>
				<div class="spacer"></div>
					<p>Remove multiples callback at once. </p>
						<p>
		<pre class="prettyprint">
//unsubscribe multiple callbacks at once
radio('changeTabEvent').unsubscribe(callback1, callback2, callback3);
</pre>
						</p>
				
		
					<h2>Ender Integration</h2>
					<p>Radio support <a href="http://ender.no.de">ender</a> and provides an ender bridge.  If you are using ender to consume Radio.js, just use the radio object like:
<pre class="prettyprint">
$.radio('changeTabEvent').subscribe(callback1).broadcast('test').unsubscribe(callback1);
</pre>						
More samples can be found in the <a href="https://github.com/uxder/Radio/blob/master/tests/ender/integration.html">integration tests</a> (thank you to 		
<a href="https://github.com/rvagg">rvagg</a>).</p>
		</article>
	</div>
    <footer>
		 Copyright 2011 Scott Murphy 
    </footer>
  </div> <!--! end of #container -->


  <script src="//ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js"></script>
  <script>window.jQuery || document.write('<script src="js/libs/jquery-1.6.2.min.js"><\/script>')</script>


  <script defer src="js/libs/prettify.js"></script>
  <script defer src="js/script.js"></script>
  <!-- end scripts-->

  <!--[if lt IE 7 ]>
    <script src="//ajax.googleapis.com/ajax/libs/chrome-frame/1.0.3/CFInstall.min.js"></script>
    <script>window.attachEvent('onload',function(){CFInstall.check({mode:'overlay'})})</script>
  <![endif]-->
  
</body>
</html>
